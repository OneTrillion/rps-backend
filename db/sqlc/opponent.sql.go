// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: opponent.sql

package db

import (
	"context"
)

const createOpponent = `-- name: CreateOpponent :one
INSERT INTO opponent (
    opponent_name
) VALUES (
    $1
) RETURNING id, opponent_name, health
`

func (q *Queries) CreateOpponent(ctx context.Context, opponentName string) (Opponent, error) {
	row := q.db.QueryRowContext(ctx, createOpponent, opponentName)
	var i Opponent
	err := row.Scan(&i.ID, &i.OpponentName, &i.Health)
	return i, err
}

const decreaseOpponentHealth = `-- name: DecreaseOpponentHealth :one
UPDATE opponent 
SET health = health - 25
WHERE id=(
    SELECT max(id) FROM opponent
    )
RETURNING health
`

func (q *Queries) DecreaseOpponentHealth(ctx context.Context) (int32, error) {
	row := q.db.QueryRowContext(ctx, decreaseOpponentHealth)
	var health int32
	err := row.Scan(&health)
	return health, err
}

const getOpponentHealth = `-- name: GetOpponentHealth :one
SELECT health
FROM opponent 
WHERE id=(
    SELECT max(id) FROM opponent
    )
LIMIT 1
`

func (q *Queries) GetOpponentHealth(ctx context.Context) (int32, error) {
	row := q.db.QueryRowContext(ctx, getOpponentHealth)
	var health int32
	err := row.Scan(&health)
	return health, err
}
